//Number of steps to reduce a number to zero.

int numberOfSteps(int num) {
        int c=0;
        while(num){
            if(num%2==0){
                num >>=1;
            } else{
                num--;
            }
            c++;
        }
        return c;        
    }


//Xor operation in Array

vector<int> a;
    int s,xor_arr=0;
    for(int i=0;i<n;i++)
    {
      s=start+2*i;
      a.push_back(s);  
    }
     for(int i=0;i<a.size();i++){
         xor_arr=xor_arr^a[i];
     }
        return xor_arr;
    }

//count set bits

int countbits(int n)
    {
        int c=0;
        while(n!=0)
        {
            n=n&(n-1);
            c++;
        }
        return c;
    }

//Power of two
   bool power2(int n){
        if(n<=0)
           return false;
        if((n&(n-1))==0)
            return true;
        else 
            return false;
    }

//power of four

bool isPowerOfFour(int n) {
     if(n<=0)
        return false;
      if(n==1)
          return true;
        return n%4==0 && isPowerOfFour(n/4);
       
    }

//prime number of set bits

 bool isprime(int s)
    {
        if(s<=1)
        {
            return false;
        }
        for(int i=2;i<=s/2;i++)
        {
            if(s%i==0)
                return false;
        }
        return true;
    }
    int countbits(int n)
    {
        int c=0;
        while(n!=0)
        {
            n=n&(n-1);
            c++;
        }
        return c;
    }
    int countPrimeSetBits(int left, int right) {
      int a=0;
      for(int i=left; i<=right; i++)
      {
          int c = countbits(i);
          if(isprime(c))
          {
              a++;
          }
        
      }
        return a;
    }

    